{"version":3,"sources":["components/Contexts/PostsContext.tsx","utils/fetchClient.ts","components/Loader/Loader.tsx","components/PostsList.tsx","api/posts.ts","components/Contexts/UserContext.tsx","components/UserSelector.tsx","api/user.ts","components/Contexts/CommentsContext.tsx","components/NewCommentForm.tsx","api/comments.ts","components/PostDetails.tsx","App.tsx","index.tsx"],"names":["PostsContext","React","createContext","PostsContextProvider","children","useState","value","posts","setPosts","Provider","BASE_URL","wait","delay","Promise","resolve","setTimeout","request","url","method","data","options","body","JSON","stringify","headers","then","fetch","response","ok","json","Error","client","Loader","className","PostsList","selectedPost","selectedUser","onSelectPost","onAddComment","onError","useContext","isLoading","setIsLoading","useEffect","userId","id","catch","finally","length","map","post","title","type","classNames","onClick","handleSelectPost","UserContext","UserContextProvider","setSelectedUser","useSelectedUser","UserSelector","isDropDownActive","onCloseDropDown","onChangeUser","allUsers","setAllUsers","name","role","tabIndex","onBlur","user","href","handleSelectUser","CommentsContext","CommentsContextProvider","comments","setComments","useComments","NewCommentForm","setName","email","setEmail","commentText","setCommentText","isSubmitted","setIsSubmitted","commentHasError","emailHasError","nameHasError","onSubmit","event","preventDefault","postId","newComment","prev","onReset","htmlFor","placeholder","onChange","target","PostDetails","isNewComment","hasError","setHasError","handleDeleteComment","commentId","filter","deleteComment","comment","App","setSelectedPost","isNewCommentActive","setIsNewCommentActive","setIsDropDownActive","postsLoadingError","setPostsLoadingError","newUser","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8c77f176.chunk.js","sourcesContent":["import React, { useState, useContext } from 'react';\nimport { Post } from '../../types/Post';\n\ninterface PostsContextType {\n  posts: Post[],\n  setPosts: React.Dispatch<React.SetStateAction<Post[]>>\n}\n\nconst PostsContext = React.createContext({} as PostsContextType);\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nexport const PostsContextProvider: React.FC<Props> = ({ children }) => {\n  const [posts, setPosts] = useState<Post[]>([]);\n\n  const value = {\n    posts,\n    setPosts,\n  };\n\n  return (\n    <PostsContext.Provider value={value}>\n      {children}\n    </PostsContext.Provider>\n  );\n};\n\nexport const usePosts = () => {\n  const posts = useContext(PostsContext);\n\n  return posts;\n};\n","const BASE_URL = 'https://mate.academy/students-api';\n\n// a promise resolved after a given delay\nfunction wait(delay: number) {\n  return new Promise(resolve => {\n    setTimeout(resolve, delay);\n  });\n}\n\n// To have autocompletion and avoid mistypes\ntype RequestMethod = 'GET' | 'POST' | 'PATCH' | 'DELETE';\n\nfunction request<T>(\n  url: string,\n  method: RequestMethod = 'GET',\n  data: any = null, // we can send any data to the server\n): Promise<T> {\n  const options: RequestInit = { method };\n\n  if (data) {\n    // We add body and Content-Type only for the requests with data\n    options.body = JSON.stringify(data);\n    options.headers = {\n      'Content-Type': 'application/json; charset=UTF-8',\n    };\n  }\n\n  // for a demo purpose we emulate a delay to see if Loaders work\n  return wait(300)\n    .then(() => fetch(BASE_URL + url, options))\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n\n      throw new Error();\n    });\n}\n\nexport const client = {\n  get: <T>(url: string) => request<T>(url),\n  post: <T>(url: string, data: any) => request<T>(url, 'POST', data),\n  patch: <T>(url: string, data: any) => request<T>(url, 'PATCH', data),\n  delete: (url: string) => request(url, 'DELETE'),\n};\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"Loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { usePosts } from './Contexts/PostsContext';\nimport { getPosts } from '../api/posts';\nimport { Post } from '../types/Post';\nimport { Loader } from './Loader';\nimport { User } from '../types/User';\n\ntype Props = {\n  selectedPost: Post | null,\n  selectedUser: User,\n  onSelectPost: (post: Post | null) => void,\n  onAddComment: (status: boolean) => void,\n  onError: (status: boolean) => void,\n};\n\nexport const PostsList: React.FC<Props> = ({\n  selectedPost,\n  selectedUser,\n  onSelectPost,\n  onAddComment,\n  onError,\n}) => {\n  const { posts, setPosts } = usePosts();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPosts(selectedUser.id)\n      .then(setPosts)\n      .catch(() => onError(true))\n      .finally(() => setIsLoading(false));\n  }, [selectedUser]);\n\n  const handleSelectPost = (post: Post) => {\n    if (selectedPost && post.id === selectedPost.id) {\n      onSelectPost(null);\n\n      return;\n    }\n\n    onAddComment(false);\n    onSelectPost(post);\n  };\n\n  return (\n    <>\n      {isLoading ? (\n        <Loader />\n      ) : (\n        <div data-cy=\"PostsList\">\n          {posts.length > 0 ? (\n            <>\n              <p className=\"title\">Posts:</p>\n              <table\n                className=\"table is-fullwidth is-striped is-hoverable is-narrow\"\n              >\n                <thead>\n                  <tr className=\"has-background-link-light\">\n                    <th>#</th>\n                    <th>Title</th>\n                    <th> </th>\n                  </tr>\n                </thead>\n\n                <tbody>\n                  {posts.map((post) => {\n                    return (\n                      <tr data-cy=\"Post\" key={post.id}>\n                        <td data-cy=\"PostId\">{post.id}</td>\n\n                        <td data-cy=\"PostTitle\">\n                          {post.title}\n                        </td>\n\n                        <td className=\"has-text-right is-vcentered\">\n                          <button\n                            type=\"button\"\n                            data-cy=\"PostButton\"\n                            className={classNames('button is-link', {\n                              'is-light': selectedPost?.id !== post.id,\n                            })}\n                            onClick={() => handleSelectPost(post)}\n                          >\n                            {selectedPost?.id !== post.id ? 'Open' : 'Close'}\n                          </button>\n                        </td>\n                      </tr>\n                    );\n                  })}\n                </tbody>\n              </table>\n            </>\n          ) : (\n            <div className=\"notification is-warning\" data-cy=\"NoPostsYet\">\n              No posts yet\n            </div>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n","import { Post } from '../types/Post';\nimport { client } from '../utils/fetchClient';\n\nexport const getPosts = (userId: number) => {\n  return client.get<Post[]>(`/posts?userId=${userId}`);\n};\n","import React, { useState, useContext } from 'react';\nimport { User } from '../../types/User';\n\ninterface SelectedUserContextType {\n  selectedUser: User | null,\n  setSelectedUser: React.Dispatch<React.SetStateAction<User | null>>\n}\n\nconst UserContext = React.createContext({} as SelectedUserContextType);\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nexport const UserContextProvider: React.FC<Props> = ({ children }) => {\n  const [selectedUser, setSelectedUser] = useState<User | null>(null);\n\n  const value = {\n    selectedUser,\n    setSelectedUser,\n  };\n\n  return (\n    <UserContext.Provider value={value}>\n      {children}\n    </UserContext.Provider>\n  );\n};\n\nexport const useSelectedUser = () => {\n  const selectedUser = useContext(UserContext);\n\n  return selectedUser;\n};\n","import React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport { User } from '../types/User';\nimport { getUsers } from '../api/user';\nimport { useSelectedUser } from './Contexts/UserContext';\n\ntype Props = {\n  isDropDownActive: boolean,\n  onCloseDropDown: (status: boolean) => void,\n  onChangeUser: (newUser: User) => void,\n};\n\nexport const UserSelector: React.FC<Props> = ({\n  isDropDownActive,\n  onCloseDropDown,\n  onChangeUser,\n}) => {\n  const [allUsers, setAllUsers] = useState<User[]>([]);\n  const { selectedUser } = useSelectedUser();\n\n  useEffect(() => {\n    getUsers()\n      .then(setAllUsers);\n  }, []);\n\n  const handleSelectUser = (user: User) => {\n    onChangeUser(user);\n    onCloseDropDown(false);\n  };\n\n  return (\n    <div\n      data-cy=\"UserSelector\"\n      className={classNames('dropdown', {\n        'is-active': isDropDownActive,\n      })}\n    >\n      <div className=\"dropdown-trigger\">\n        <button\n          type=\"button\"\n          className=\"button\"\n          aria-haspopup=\"true\"\n          aria-controls=\"dropdown-menu\"\n          onClick={() => onCloseDropDown(!isDropDownActive)}\n        >\n          <span>{selectedUser?.name || 'Choose a user'}</span>\n\n          <span className=\"icon is-small\">\n            <i className=\"fas fa-angle-down\" aria-hidden=\"true\" />\n          </span>\n        </button>\n      </div>\n\n      <div\n        className=\"dropdown-menu\"\n        id=\"dropdown-menu\"\n        role=\"menu\"\n        tabIndex={0}\n        onBlur={() => onCloseDropDown(false)}\n      >\n        <div className=\"dropdown-content\">\n          {allUsers.map((user) => (\n            <a\n              href={`#user-${user.id}`}\n              className={classNames('dropdown-item',\n                { 'is-active': selectedUser?.id === user.id })}\n              onClick={() => handleSelectUser(user)}\n              key={user.id}\n            >\n              {user.name}\n            </a>\n\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { User } from '../types/User';\nimport { client } from '../utils/fetchClient';\n\nexport const getUsers = () => {\n  return client.get<User[]>('/users');\n};\n","import React, { useState, useContext } from 'react';\nimport { Comment } from '../../types/Comment';\n\ninterface CommentsContextType {\n  comments: Comment[],\n  setComments: React.Dispatch<React.SetStateAction<Comment[]>>\n}\n\nconst CommentsContext = React.createContext({} as CommentsContextType);\n\ntype Props = {\n  children: React.ReactNode,\n};\n\nexport const CommentsContextProvider: React.FC<Props> = ({ children }) => {\n  const [comments, setComments] = useState<Comment[]>([]);\n\n  const value = {\n    comments,\n    setComments,\n  };\n\n  return (\n    <CommentsContext.Provider value={value}>\n      {children}\n    </CommentsContext.Provider>\n  );\n};\n\nexport const useComments = () => {\n  const comments = useContext(CommentsContext);\n\n  return comments;\n};\n","import React, { useState } from 'react';\nimport classNames from 'classnames';\nimport { createComment } from '../api/comments';\nimport { Post } from '../types/Post';\nimport { useComments } from './Contexts/CommentsContext';\n\ntype Props = {\n  selectedPost: Post,\n};\n\nexport const NewCommentForm: React.FC<Props> = ({ selectedPost }) => {\n  const { setComments } = useComments();\n\n  const [name, setName] = useState('');\n  const [email, setEmail] = useState('');\n  const [commentText, setCommentText] = useState('');\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n    setIsSubmitted(true);\n    if (name && email && commentText) {\n      setIsLoading(true);\n      createComment({\n        name,\n        email,\n        body: commentText,\n        postId: selectedPost.id,\n      }).then((newComment) => {\n        setComments(prev => [...prev, newComment]);\n      }).finally(() => {\n        setCommentText('');\n        setIsSubmitted(false);\n        setIsLoading(false);\n      });\n    }\n  };\n\n  const onClear = (event: React.FormEvent<HTMLFormElement>) => {\n    event.preventDefault();\n\n    setEmail('');\n    setName('');\n    setCommentText('');\n    setIsSubmitted(false);\n  };\n\n  const commentHasError = !commentText && isSubmitted;\n  const emailHasError = !email && isSubmitted;\n  const nameHasError = !name && isSubmitted;\n\n  const handleChangeName = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setName(event.target.value);\n  };\n\n  const handleChangeEmail = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setEmail(event.target.value);\n  };\n\n  const handleChangeComment = (\n    event: React.ChangeEvent<HTMLTextAreaElement>,\n  ) => {\n    setCommentText(event.target.value);\n  };\n\n  return (\n    <form\n      data-cy=\"NewCommentForm\"\n      onSubmit={onSubmit}\n      onReset={onClear}\n    >\n      <div className=\"field\" data-cy=\"NameField\">\n        <label className=\"label\" htmlFor=\"comment-author-name\">\n          Author Name\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            id=\"comment-author-name\"\n            placeholder=\"Name Surname\"\n            className={classNames('input', { 'is-danger': nameHasError })}\n            value={name}\n            onChange={handleChangeName}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-user\" />\n          </span>\n          {nameHasError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {nameHasError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Name is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"EmailField\">\n        <label className=\"label\" htmlFor=\"comment-author-email\">\n          Author Email\n        </label>\n\n        <div className=\"control has-icons-left has-icons-right\">\n          <input\n            type=\"text\"\n            name=\"email\"\n            id=\"comment-author-email\"\n            placeholder=\"email@test.com\"\n            className={classNames('input', { 'is-danger': emailHasError })}\n            value={email}\n            onChange={handleChangeEmail}\n          />\n\n          <span className=\"icon is-small is-left\">\n            <i className=\"fas fa-envelope\" />\n          </span>\n\n          {emailHasError && (\n            <span\n              className=\"icon is-small is-right has-text-danger\"\n              data-cy=\"ErrorIcon\"\n            >\n              <i className=\"fas fa-exclamation-triangle\" />\n            </span>\n          )}\n        </div>\n        {emailHasError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Email is required\n          </p>\n        )}\n      </div>\n\n      <div className=\"field\" data-cy=\"BodyField\">\n        <label className=\"label\" htmlFor=\"comment-body\">\n          Comment Text\n        </label>\n\n        <div className=\"control\">\n          <textarea\n            id=\"comment-body\"\n            name=\"body\"\n            placeholder=\"Type comment here\"\n            className={classNames('textarea', { 'is-danger': commentHasError })}\n            value={commentText}\n            onChange={handleChangeComment}\n          />\n        </div>\n        {commentHasError && (\n          <p className=\"help is-danger\" data-cy=\"ErrorMessage\">\n            Enter some text\n          </p>\n        )}\n      </div>\n\n      <div className=\"field is-grouped\">\n        <div className=\"control\">\n          <button\n            type=\"submit\"\n            className={classNames('button is-link',\n              { 'is-loading': isLoading })}\n          >\n            Add\n          </button>\n        </div>\n\n        <div className=\"control\">\n          {/* eslint-disable-next-line react/button-has-type */}\n          <button type=\"reset\" className=\"button is-link is-light\">\n            Clear\n          </button>\n        </div>\n      </div>\n    </form>\n  );\n};\n","import { Comment } from '../types/Comment';\nimport { NewComment } from '../types/NewComment';\nimport { client } from '../utils/fetchClient';\n\nexport const getComments = (postId: number) => {\n  return client.get<Comment[]>(`/comments?postId=${postId}`);\n};\n\nexport const createComment = (data: NewComment) => {\n  return client.post<Comment>('/comments', data);\n};\n\nexport const deleteComment = (commentId: number) => {\n  return client.delete(`/comments/${commentId}`);\n};\n","import React, { useEffect, useState } from 'react';\nimport { Loader } from './Loader';\nimport { NewCommentForm } from './NewCommentForm';\nimport { useComments } from './Contexts/CommentsContext';\nimport { Post } from '../types/Post';\nimport { deleteComment, getComments } from '../api/comments';\n\ntype Props = {\n  selectedPost: Post,\n  isNewComment: boolean,\n  onAddComment: (status: boolean) => void,\n};\n\nexport const PostDetails: React.FC<Props> = ({\n  selectedPost,\n  isNewComment,\n  onAddComment,\n}) => {\n  const { comments, setComments } = useComments();\n\n  const [isLoading, setIsLoading] = useState(false);\n  const [hasError, setHasError] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    if (selectedPost) {\n      getComments(selectedPost.id)\n        .then(setComments)\n        .catch(() => setHasError(true))\n        .finally(() => setIsLoading(false));\n    }\n  }, [selectedPost]);\n\n  const toggleAddCommentForm = () => {\n    onAddComment(true);\n  };\n\n  const handleDeleteComment = (commentId: number) => {\n    setComments(prev => prev.filter(({ id }) => id !== commentId));\n    deleteComment(commentId);\n  };\n\n  return (\n    <>\n      <div className=\"content\" data-cy=\"PostDetails\">\n        <div className=\"block\">\n          <h2 data-cy=\"PostTitle\">\n            {`#${selectedPost?.id}: ${selectedPost?.title}`}\n          </h2>\n\n          <p data-cy=\"PostBody\">\n            {selectedPost?.body}\n          </p>\n        </div>\n\n        <div className=\"block\">\n          {isLoading ? (\n            <Loader />\n          ) : (\n            <>\n              {hasError ? (\n                <div className=\"notification is-danger\" data-cy=\"CommentsError\">\n                  Something went wrong\n                </div>\n              ) : (\n                <>\n                  {\n                    comments.length ? (\n                      <>\n                        <p className=\"title is-4\">Comments:</p>\n\n                        {comments.map((comment) => (\n                          <article\n                            className=\"message is-small\"\n                            data-cy=\"Comment\"\n                            key={comment.id}\n                          >\n                            <div className=\"message-header\">\n                              <a href={`mailto:${comment.email}`} data-cy=\"CommentAuthor\">\n                                {comment.name}\n                              </a>\n                              <button\n                                data-cy=\"CommentDelete\"\n                                type=\"button\"\n                                className=\"delete is-small\"\n                                aria-label=\"delete\"\n                                onClick={() => handleDeleteComment(comment.id)}\n                              >\n                                delete button\n                              </button>\n                            </div>\n\n                            <div className=\"message-body\" data-cy=\"CommentBody\">\n                              {comment.body}\n                            </div>\n                          </article>\n                        ))}\n                      </>\n                    ) : (\n                      <p className=\"title is-4\" data-cy=\"NoCommentsMessage\">\n                        No comments yet\n                      </p>\n                    )\n                  }\n                  {isNewComment ? (\n                    <NewCommentForm selectedPost={selectedPost} />\n                  ) : (\n                    <button\n                      data-cy=\"WriteCommentButton\"\n                      type=\"button\"\n                      className=\"button is-link\"\n                      onClick={toggleAddCommentForm}\n                    >\n                      Write a comment\n                    </button>\n                  )}\n                </>\n              )}\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n","import React, { useState } from 'react';\nimport 'bulma/bulma.sass';\nimport '@fortawesome/fontawesome-free/css/all.css';\nimport './App.scss';\n\nimport classNames from 'classnames';\nimport { PostsList } from './components/PostsList';\nimport { UserSelector } from './components/UserSelector';\nimport { useSelectedUser } from './components/Contexts/UserContext';\nimport { PostDetails } from './components/PostDetails';\nimport { Post } from './types/Post';\nimport { User } from './types/User';\n\nexport const App: React.FC = () => {\n  const [selectedPost, setSelectedPost] = useState<Post | null>(null);\n\n  const [isNewCommentActive, setIsNewCommentActive] = useState(false);\n  const [isDropDownActive, setIsDropDownActive] = useState(false);\n\n  const [postsLoadingError, setPostsLoadingError] = useState(false);\n\n  const { selectedUser, setSelectedUser } = useSelectedUser();\n\n  const changeSelectedUser = (newUser: User) => {\n    setSelectedPost(null);\n    setSelectedUser(null);\n    setSelectedUser(newUser);\n  };\n\n  return (\n    <main\n      className=\"section\"\n      role=\"presentation\"\n      onClick={() => {\n        if (isDropDownActive) {\n          setIsDropDownActive(false);\n        }\n      }}\n    >\n      <div className=\"container\">\n        <div className=\"tile is-ancestor\">\n          <div className=\"tile is-parent\">\n            <div className=\"tile is-child box is-success\">\n              <div className=\"block\">\n                <UserSelector\n                  isDropDownActive={isDropDownActive}\n                  onCloseDropDown={setIsDropDownActive}\n                  onChangeUser={changeSelectedUser}\n                />\n              </div>\n\n              <div className=\"block\" data-cy=\"MainContent\">\n                {!selectedUser && (\n                  <p data-cy=\"NoSelectedUser\">\n                    No user selected\n                  </p>\n                )}\n                {postsLoadingError && (\n                  <div\n                    className=\"notification is-danger\"\n                    data-cy=\"PostsLoadingError\"\n                  >\n                    Something went wrong!\n                  </div>\n                )}\n                {(selectedUser && !postsLoadingError) && (\n                  <PostsList\n                    selectedPost={selectedPost}\n                    selectedUser={selectedUser}\n                    onSelectPost={(post) => setSelectedPost(post)}\n                    onAddComment={setIsNewCommentActive}\n                    onError={setPostsLoadingError}\n                  />\n                )}\n              </div>\n            </div>\n          </div>\n\n          <div\n            data-cy=\"Sidebar\"\n            className={classNames(\n              'tile',\n              'is-parent',\n              'is-8-desktop',\n              'Sidebar',\n              { 'Sidebar--open': !!selectedPost },\n            )}\n          >\n            {selectedPost && (\n              <div className=\"tile is-child box is-success \">\n                <PostDetails\n                  selectedPost={selectedPost}\n                  isNewComment={isNewCommentActive}\n                  onAddComment={setIsNewCommentActive}\n                />\n              </div>\n            )}\n          </div>\n        </div>\n      </div>\n    </main>\n  );\n};\n","import ReactDOM from 'react-dom';\n\nimport { App } from './App';\nimport { UserContextProvider } from './components/Contexts/UserContext';\nimport { PostsContextProvider } from './components/Contexts/PostsContext';\nimport { CommentsContextProvider } from './components/Contexts/CommentsContext';\n\nReactDOM.render(\n  <UserContextProvider>\n    <PostsContextProvider>\n      <CommentsContextProvider>\n        <App />\n      </CommentsContextProvider>\n    </PostsContextProvider>\n  </UserContextProvider>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}